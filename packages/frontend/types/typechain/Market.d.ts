/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    'asset()': FunctionFragment
    'buy(uint256)': FunctionFragment
    'buyLicence(uint256)': FunctionFragment
    'getSmartLicenceOffer(uint256)': FunctionFragment
    'getSmartOffer(uint256)': FunctionFragment
    'sell(uint256,uint256,address)': FunctionFragment
    'sellLicence(uint256,uint256,address,uint64)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'asset', values?: undefined): string
  encodeFunctionData(functionFragment: 'buy', values: [BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'buyLicence',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getSmartLicenceOffer',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getSmartOffer',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'sell',
    values: [BigNumberish, BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'sellLicence',
    values: [BigNumberish, BigNumberish, string, BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: 'asset', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buy', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'buyLicence', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getSmartLicenceOffer',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getSmartOffer',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'sell', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sellLicence', data: BytesLike): Result

  events: {
    'CloseSmartOffer(address,uint256)': EventFragment
    'NewLicence(address,address,uint256)': EventFragment
    'NewSmartOffer(address,uint256,uint256,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'CloseSmartOffer'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewLicence'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'NewSmartOffer'): EventFragment
}

export class Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: MarketInterface

  functions: {
    asset(overrides?: CallOverrides): Promise<[string]>

    buy(
      _sellID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    buyLicence(
      _sellID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getSmartLicenceOffer(
      _sellID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>

    getSmartOffer(
      _sellID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        seller: string
        what: BigNumber
        price: BigNumber
        money: string
        sellID: BigNumber
      }
    >

    sell(
      _what: BigNumberish,
      _price: BigNumberish,
      _money: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    sellLicence(
      _what: BigNumberish,
      _price: BigNumberish,
      _money: string,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  asset(overrides?: CallOverrides): Promise<string>

  buy(
    _sellID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  buyLicence(
    _sellID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getSmartLicenceOffer(
    _sellID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>

  getSmartOffer(
    _sellID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, BigNumber] & {
      seller: string
      what: BigNumber
      price: BigNumber
      money: string
      sellID: BigNumber
    }
  >

  sell(
    _what: BigNumberish,
    _price: BigNumberish,
    _money: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  sellLicence(
    _what: BigNumberish,
    _price: BigNumberish,
    _money: string,
    _expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    asset(overrides?: CallOverrides): Promise<string>

    buy(_sellID: BigNumberish, overrides?: CallOverrides): Promise<void>

    buyLicence(_sellID: BigNumberish, overrides?: CallOverrides): Promise<void>

    getSmartLicenceOffer(
      _sellID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    getSmartOffer(
      _sellID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, BigNumber] & {
        seller: string
        what: BigNumber
        price: BigNumber
        money: string
        sellID: BigNumber
      }
    >

    sell(
      _what: BigNumberish,
      _price: BigNumberish,
      _money: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    sellLicence(
      _what: BigNumberish,
      _price: BigNumberish,
      _money: string,
      _expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    CloseSmartOffer(
      buyer?: null,
      sellID?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { buyer: string; sellID: BigNumber }
    >

    NewLicence(
      buyer?: string | null,
      seller?: string | null,
      newLicenceId?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { buyer: string; seller: string; newLicenceId: BigNumber }
    >

    NewSmartOffer(
      seller?: null,
      what?: null,
      price?: null,
      money?: null,
      sellID?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        seller: string
        what: BigNumber
        price: BigNumber
        money: string
        sellID: BigNumber
      }
    >
  }

  estimateGas: {
    asset(overrides?: CallOverrides): Promise<BigNumber>

    buy(
      _sellID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    buyLicence(
      _sellID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getSmartLicenceOffer(
      _sellID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getSmartOffer(
      _sellID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    sell(
      _what: BigNumberish,
      _price: BigNumberish,
      _money: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    sellLicence(
      _what: BigNumberish,
      _price: BigNumberish,
      _money: string,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    asset(overrides?: CallOverrides): Promise<PopulatedTransaction>

    buy(
      _sellID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    buyLicence(
      _sellID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getSmartLicenceOffer(
      _sellID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getSmartOffer(
      _sellID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    sell(
      _what: BigNumberish,
      _price: BigNumberish,
      _money: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    sellLicence(
      _what: BigNumberish,
      _price: BigNumberish,
      _money: string,
      _expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
