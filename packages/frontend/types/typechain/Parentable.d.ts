/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface ParentableInterface extends ethers.utils.Interface {
  functions: {
    'allow(address,uint256)': FunctionFragment
    'allowBatch(address[],uint256)': FunctionFragment
    'disallow(address,uint256)': FunctionFragment
    'disallowBatch(address[],uint256)': FunctionFragment
    'getParentID(uint256)': FunctionFragment
    'isAllowed(uint256,address)': FunctionFragment
    'isPublic(uint256)': FunctionFragment
    'makePrivate(uint256)': FunctionFragment
    'makePublic(uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'allow',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'allowBatch',
    values: [string[], BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'disallow',
    values: [string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'disallowBatch',
    values: [string[], BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getParentID',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'isAllowed',
    values: [BigNumberish, string]
  ): string
  encodeFunctionData(
    functionFragment: 'isPublic',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'makePrivate',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'makePublic',
    values: [BigNumberish]
  ): string

  decodeFunctionResult(functionFragment: 'allow', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowBatch', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'disallow', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'disallowBatch',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getParentID', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isAllowed', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isPublic', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'makePrivate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'makePublic', data: BytesLike): Result

  events: {}
}

export class Parentable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ParentableInterface

  functions: {
    allow(
      _address: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    allowBatch(
      _addresses: string[],
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    disallow(
      _address: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    disallowBatch(
      _addresses: string[],
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getParentID(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    isAllowed(
      id: BigNumberish,
      requester: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    isPublic(id: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>

    makePrivate(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    makePublic(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  allow(
    _address: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  allowBatch(
    _addresses: string[],
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  disallow(
    _address: string,
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  disallowBatch(
    _addresses: string[],
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getParentID(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  isAllowed(
    id: BigNumberish,
    requester: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  isPublic(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  makePrivate(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  makePublic(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    allow(
      _address: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    allowBatch(
      _addresses: string[],
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    disallow(
      _address: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    disallowBatch(
      _addresses: string[],
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    getParentID(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isAllowed(
      id: BigNumberish,
      requester: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    isPublic(id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    makePrivate(_id: BigNumberish, overrides?: CallOverrides): Promise<void>

    makePublic(_id: BigNumberish, overrides?: CallOverrides): Promise<void>
  }

  filters: {}

  estimateGas: {
    allow(
      _address: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    allowBatch(
      _addresses: string[],
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    disallow(
      _address: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    disallowBatch(
      _addresses: string[],
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getParentID(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isAllowed(
      id: BigNumberish,
      requester: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    isPublic(id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    makePrivate(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    makePublic(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    allow(
      _address: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    allowBatch(
      _addresses: string[],
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    disallow(
      _address: string,
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    disallowBatch(
      _addresses: string[],
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getParentID(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isAllowed(
      id: BigNumberish,
      requester: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isPublic(
      id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    makePrivate(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    makePublic(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
