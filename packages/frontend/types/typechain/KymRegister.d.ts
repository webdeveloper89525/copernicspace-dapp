/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface KymRegisterInterface extends ethers.utils.Interface {
  functions: {
    'changeAdmin(address)': FunctionFragment
    'currentAdmin()': FunctionFragment
    'getAssetAddress()': FunctionFragment
    'getKymStatusInfo(uint256)': FunctionFragment
    'getOperatorStatusInfo(address)': FunctionFragment
    'kymStatus(uint256)': FunctionFragment
    'operatorAccess(address)': FunctionFragment
    'setKymStatus(uint256,bool)': FunctionFragment
    'setOperatorStatus(address,bool)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'changeAdmin', values: [string]): string
  encodeFunctionData(
    functionFragment: 'currentAdmin',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getAssetAddress',
    values?: undefined
  ): string
  encodeFunctionData(
    functionFragment: 'getKymStatusInfo',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getOperatorStatusInfo',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'kymStatus',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'operatorAccess',
    values: [string]
  ): string
  encodeFunctionData(
    functionFragment: 'setKymStatus',
    values: [BigNumberish, boolean]
  ): string
  encodeFunctionData(
    functionFragment: 'setOperatorStatus',
    values: [string, boolean]
  ): string

  decodeFunctionResult(functionFragment: 'changeAdmin', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'currentAdmin',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getAssetAddress',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getKymStatusInfo',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'getOperatorStatusInfo',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'kymStatus', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'operatorAccess',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setKymStatus',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setOperatorStatus',
    data: BytesLike
  ): Result

  events: {}
}

export class KymRegister extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: KymRegisterInterface

  functions: {
    changeAdmin(
      newAdminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    currentAdmin(overrides?: CallOverrides): Promise<[string]>

    getAssetAddress(overrides?: CallOverrides): Promise<[string]>

    getKymStatusInfo(
      assetID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    getOperatorStatusInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>

    kymStatus(arg0: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>

    operatorAccess(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    setKymStatus(
      assetID: BigNumberish,
      kymValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setOperatorStatus(
      newOperatorAddress: string,
      isOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  changeAdmin(
    newAdminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  currentAdmin(overrides?: CallOverrides): Promise<string>

  getAssetAddress(overrides?: CallOverrides): Promise<string>

  getKymStatusInfo(
    assetID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>

  getOperatorStatusInfo(
    userAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>

  kymStatus(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  operatorAccess(arg0: string, overrides?: CallOverrides): Promise<boolean>

  setKymStatus(
    assetID: BigNumberish,
    kymValue: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setOperatorStatus(
    newOperatorAddress: string,
    isOperator: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    changeAdmin(
      newAdminAddress: string,
      overrides?: CallOverrides
    ): Promise<void>

    currentAdmin(overrides?: CallOverrides): Promise<string>

    getAssetAddress(overrides?: CallOverrides): Promise<string>

    getKymStatusInfo(
      assetID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>

    getOperatorStatusInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>

    kymStatus(arg0: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    operatorAccess(arg0: string, overrides?: CallOverrides): Promise<boolean>

    setKymStatus(
      assetID: BigNumberish,
      kymValue: boolean,
      overrides?: CallOverrides
    ): Promise<void>

    setOperatorStatus(
      newOperatorAddress: string,
      isOperator: boolean,
      overrides?: CallOverrides
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    changeAdmin(
      newAdminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    currentAdmin(overrides?: CallOverrides): Promise<BigNumber>

    getAssetAddress(overrides?: CallOverrides): Promise<BigNumber>

    getKymStatusInfo(
      assetID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getOperatorStatusInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    kymStatus(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    operatorAccess(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    setKymStatus(
      assetID: BigNumberish,
      kymValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setOperatorStatus(
      newOperatorAddress: string,
      isOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    changeAdmin(
      newAdminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    currentAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getAssetAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getKymStatusInfo(
      assetID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getOperatorStatusInfo(
      userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    kymStatus(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    operatorAccess(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    setKymStatus(
      assetID: BigNumberish,
      kymValue: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setOperatorStatus(
      newOperatorAddress: string,
      isOperator: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
