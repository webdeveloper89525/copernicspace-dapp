/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface DivisibleInterface extends ethers.utils.Interface {
  functions: {
    'batchDivideInto(uint256,uint256[],uint256[])': FunctionFragment
    'disableToken(uint256)': FunctionFragment
    'divisionOf(uint256)': FunctionFragment
    'enableToken(uint256)': FunctionFragment
    'getMinStepSize(uint256)': FunctionFragment
    'getWeight(uint256)': FunctionFragment
    'isDivisible(uint256)': FunctionFragment
    'joinBack(uint256)': FunctionFragment
    'makeDivisible(uint256)': FunctionFragment
    'makeNotDivisible(uint256)': FunctionFragment
    'setMinStepSize(uint256,uint256)': FunctionFragment
    'setWeight(uint256,uint256)': FunctionFragment
    'stepDivideInto(uint256,uint256,uint256)': FunctionFragment
  }

  encodeFunctionData(
    functionFragment: 'batchDivideInto',
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string
  encodeFunctionData(
    functionFragment: 'disableToken',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'divisionOf',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'enableToken',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getMinStepSize',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'getWeight',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'isDivisible',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'joinBack',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'makeDivisible',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'makeNotDivisible',
    values: [BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setMinStepSize',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'setWeight',
    values: [BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'stepDivideInto',
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string

  decodeFunctionResult(
    functionFragment: 'batchDivideInto',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'disableToken',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'divisionOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'enableToken', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'getMinStepSize',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getWeight', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isDivisible', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'joinBack', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'makeDivisible',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'makeNotDivisible',
    data: BytesLike
  ): Result
  decodeFunctionResult(
    functionFragment: 'setMinStepSize',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'setWeight', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'stepDivideInto',
    data: BytesLike
  ): Result

  events: {}
}

export class Divisible extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: DivisibleInterface

  functions: {
    batchDivideInto(
      _id: BigNumberish,
      listOfNumSizes: BigNumberish[],
      listOfStepSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    disableToken(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    divisionOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { divID: BigNumber }>

    enableToken(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getMinStepSize(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { minStepSize: BigNumber }>

    getWeight(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { weight: BigNumber }>

    isDivisible(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { _isDivisible: boolean }>

    joinBack(
      _idToJoinBack: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    makeDivisible(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    makeNotDivisible(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setMinStepSize(
      _id: BigNumberish,
      _stepSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setWeight(
      _id: BigNumberish,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    stepDivideInto(
      _id: BigNumberish,
      _stepNum: BigNumberish,
      _stepSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>
  }

  batchDivideInto(
    _id: BigNumberish,
    listOfNumSizes: BigNumberish[],
    listOfStepSizes: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  disableToken(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  divisionOf(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  enableToken(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getMinStepSize(
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  getWeight(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  isDivisible(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

  joinBack(
    _idToJoinBack: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  makeDivisible(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  makeNotDivisible(
    _id: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setMinStepSize(
    _id: BigNumberish,
    _stepSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setWeight(
    _id: BigNumberish,
    _weight: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  stepDivideInto(
    _id: BigNumberish,
    _stepNum: BigNumberish,
    _stepSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    batchDivideInto(
      _id: BigNumberish,
      listOfNumSizes: BigNumberish[],
      listOfStepSizes: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    disableToken(_id: BigNumberish, overrides?: CallOverrides): Promise<void>

    divisionOf(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    enableToken(_id: BigNumberish, overrides?: CallOverrides): Promise<void>

    getMinStepSize(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getWeight(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    isDivisible(_id: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    joinBack(
      _idToJoinBack: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    makeDivisible(_id: BigNumberish, overrides?: CallOverrides): Promise<void>

    makeNotDivisible(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setMinStepSize(
      _id: BigNumberish,
      _stepSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    setWeight(
      _id: BigNumberish,
      _weight: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    stepDivideInto(
      _id: BigNumberish,
      _stepNum: BigNumberish,
      _stepSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>
  }

  filters: {}

  estimateGas: {
    batchDivideInto(
      _id: BigNumberish,
      listOfNumSizes: BigNumberish[],
      listOfStepSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    disableToken(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    divisionOf(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    enableToken(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getMinStepSize(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    getWeight(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    isDivisible(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    joinBack(
      _idToJoinBack: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    makeDivisible(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    makeNotDivisible(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setMinStepSize(
      _id: BigNumberish,
      _stepSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setWeight(
      _id: BigNumberish,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    stepDivideInto(
      _id: BigNumberish,
      _stepNum: BigNumberish,
      _stepSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    batchDivideInto(
      _id: BigNumberish,
      listOfNumSizes: BigNumberish[],
      listOfStepSizes: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    disableToken(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    divisionOf(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    enableToken(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getMinStepSize(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getWeight(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    isDivisible(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    joinBack(
      _idToJoinBack: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    makeDivisible(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    makeNotDivisible(
      _id: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setMinStepSize(
      _id: BigNumberish,
      _stepSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setWeight(
      _id: BigNumberish,
      _weight: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    stepDivideInto(
      _id: BigNumberish,
      _stepNum: BigNumberish,
      _stepSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>
  }
}
