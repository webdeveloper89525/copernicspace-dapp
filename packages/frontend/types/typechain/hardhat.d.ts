/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from 'ethers'
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase
} from '@nomiclabs/hardhat-ethers/types'

import * as Contracts from '.'

declare module 'hardhat/types/runtime' {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: 'AccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>
    getContractFactory(
      name: 'IAccessControl',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>
    getContractFactory(
      name: 'ERC1155',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>
    getContractFactory(
      name: 'IERC1155MetadataURI',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataURI__factory>
    getContractFactory(
      name: 'IERC1155',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>
    getContractFactory(
      name: 'IERC1155Receiver',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>
    getContractFactory(
      name: 'ERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>
    getContractFactory(
      name: 'IERC20Metadata',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>
    getContractFactory(
      name: 'IERC20',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>
    getContractFactory(
      name: 'ERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>
    getContractFactory(
      name: 'IERC165',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>
    getContractFactory(
      name: 'KycRegister',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KycRegister__factory>
    getContractFactory(
      name: 'KymRegister',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KymRegister__factory>
    getContractFactory(
      name: 'Asset',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Asset__factory>
    getContractFactory(
      name: 'Divisible',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Divisible__factory>
    getContractFactory(
      name: 'Licencable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Licencable__factory>
    getContractFactory(
      name: 'Parentable',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Parentable__factory>
    getContractFactory(
      name: 'Market',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Market__factory>
    getContractFactory(
      name: 'ERC20Mock',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>
    getContractFactory(
      name: 'Multicall',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicall__factory>
    getContractFactory(
      name: 'SpacePool',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpacePool__factory>
    getContractFactory(
      name: 'ERC20PercentageTest',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PercentageTest__factory>
    getContractFactory(
      name: 'ERC20Percentage',
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Percentage__factory>

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>
  }
}
